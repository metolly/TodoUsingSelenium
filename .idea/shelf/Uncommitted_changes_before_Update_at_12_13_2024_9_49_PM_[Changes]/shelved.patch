Index: src/test/java/com/qacart/todo/utils/ConfigUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.utils;\r\n\r\npublic class ConfigUtils {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/utils/ConfigUtils.java b/src/test/java/com/qacart/todo/utils/ConfigUtils.java
--- a/src/test/java/com/qacart/todo/utils/ConfigUtils.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/utils/ConfigUtils.java	(date 1734028764050)
@@ -1,4 +1,42 @@
 package com.qacart.todo.utils;
 
+import java.util.Properties;
+
 public class ConfigUtils {
+    private  Properties properties ;
+    private static ConfigUtils configUtils;
+
+    private ConfigUtils(){
+       String env = System.getProperty("env","PRODUCTION");
+       switch (env){
+           case "PRODUCTION":
+               properties = PropertiesUtils.loadProperties("src/test/java/com/qacart/todo/config/production.properties");
+               break;
+           default:
+               throw new RuntimeException("Environment is not supported");
+
+       }
+
+    }
+    public static ConfigUtils getInstance(){
+        if(configUtils==null){
+            configUtils =new ConfigUtils();
+        }
+        return configUtils;
+    }
+    public  String getBaseUrl(){
+        String prop = properties.getProperty("baseUrl");
+        if(prop!=null)return prop ;
+            throw new RuntimeException("Could not find the base url in the property file");
+    }
+    public  String getemail(){
+        String prop = properties.getProperty("email");
+        if(prop!=null)return prop ;
+        throw new RuntimeException("Could not find the email in the property file");
+    }
+    public  String getPassword(){
+        String prop = properties.getProperty("password");
+        if(prop!=null)return prop ;
+        throw new RuntimeException("Could not find the password in the property file");
+    }
 }
Index: src/test/java/com/qacart/todo/pages/TodoPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.pages;\r\n\r\npublic class TodoPage {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/pages/TodoPage.java b/src/test/java/com/qacart/todo/pages/TodoPage.java
--- a/src/test/java/com/qacart/todo/pages/TodoPage.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/pages/TodoPage.java	(date 1734037412156)
@@ -1,4 +1,54 @@
 package com.qacart.todo.pages;
 
-public class TodoPage {
+import com.qacart.todo.apis.RegisterApi;
+import com.qacart.todo.base.BasePage;
+import com.qacart.todo.utils.ConfigUtils;
+import io.qameta.allure.Step;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+public class TodoPage extends BasePage {
+
+
+    public TodoPage(WebDriver driver) {
+        super(driver);
+    }
+
+    @FindBy(css = "[data-testid=\"welcome\"]")
+    private WebElement welcomeMessage;
+    @FindBy(css = "[data-testid=\"add\"]")
+    private WebElement addButton;
+    @FindBy(css = "[data-testid=\"todo-item\"]")
+    private WebElement todo_item;
+    @FindBy(css = "[data-testid=\"no-todos\"]")
+    private WebElement no_todos;
+    @FindBy(css = "[data-testid=\"delete\"]")
+    private WebElement deleteButton;
+    public TodoPage deleteButton(){
+        deleteButton.click();
+        return this;
+    }
+    @Step
+    public TodoPage load(){
+        driver.get("https://todo.qacart.com/todo");
+        return this;
+    }
+    @Step
+    public boolean isdisplayed (){
+        return welcomeMessage.isDisplayed();
+    }
+    @Step
+    public String getTodo_ItemText(){
+        return todo_item.getText();
+    }
+    @Step
+    public boolean noTodos(){
+        return no_todos.isDisplayed();
+    }
+    @Step
+    public NewTodoPage clickOnPlusButton(){
+        addButton.click();
+        return new NewTodoPage(driver);
+    }
 }
Index: src/test/java/com/qacart/todo/utils/PropertiesUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.utils;\r\n\r\npublic class propertiesUtils {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/utils/PropertiesUtils.java b/src/test/java/com/qacart/todo/utils/PropertiesUtils.java
--- a/src/test/java/com/qacart/todo/utils/PropertiesUtils.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/utils/PropertiesUtils.java	(date 1733852267810)
@@ -1,4 +1,23 @@
 package com.qacart.todo.utils;
 
-public class propertiesUtils {
+import java.io.*;
+import java.util.Properties;
+
+public class PropertiesUtils {
+        public static Properties loadProperties(String filePath){
+            File file =new File(filePath);
+            try {
+                InputStream inputStream =new FileInputStream(file);
+                Properties properties =new Properties();
+                properties.load(inputStream);
+                inputStream.close();
+                return properties;
+            } catch (FileNotFoundException e) {
+                throw new RuntimeException("File is Not Found");
+            } catch (IOException e) {
+                throw new RuntimeException("Error While Loading The Properties");
+            }
+        }
+
 }
+
Index: src/test/java/com/qacart/todo/pages/NewTodoPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.pages;\r\n\r\npublic class NewTodoPage {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/pages/NewTodoPage.java b/src/test/java/com/qacart/todo/pages/NewTodoPage.java
--- a/src/test/java/com/qacart/todo/pages/NewTodoPage.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/pages/NewTodoPage.java	(date 1734037412187)
@@ -1,4 +1,25 @@
 package com.qacart.todo.pages;
 
-public class NewTodoPage {
+import com.qacart.todo.base.BasePage;
+import io.qameta.allure.Step;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+public class NewTodoPage extends BasePage {
+
+    public NewTodoPage(WebDriver driver) {
+        super(driver);
+    }
+    @FindBy(css = "[data-testid=\"new-todo\"]")
+    private WebElement new_todo;
+    @FindBy(css = "[data-testid=\"submit-newTask\"]")
+    private WebElement submit_newTask;
+    @Step
+    public TodoPage submit_newtask (String item){
+        new_todo.sendKeys(item);
+        submit_newTask.click();
+        return new TodoPage(driver);
+    }
+
 }
Index: src/test/java/com/qacart/todo/testcases/loginTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.testcases;\r\n\r\npublic class login {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/testcases/loginTest.java b/src/test/java/com/qacart/todo/testcases/loginTest.java
--- a/src/test/java/com/qacart/todo/testcases/loginTest.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/testcases/loginTest.java	(date 1734107568028)
@@ -1,4 +1,36 @@
 package com.qacart.todo.testcases;
 
-public class login {
+import com.qacart.todo.base.BaseTest;
+import com.qacart.todo.factory.DriverFactory;
+import com.qacart.todo.pages.LoginPage;
+import com.qacart.todo.pages.TodoPage;
+import com.qacart.todo.utils.ConfigUtils;
+import io.github.bonigarcia.wdm.WebDriverManager;
+import io.qameta.allure.Description;
+import io.qameta.allure.Feature;
+import io.qameta.allure.Story;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.edge.EdgeDriver;
+import org.openqa.selenium.firefox.FirefoxDriver;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+@Feature("Auth Feature ")
+public class loginTest extends BaseTest {
+@Story("Login with email and password")
+@Description("It will login by using email and password and navigate to the todo page ")
+    @Test(description = "Test the login functionality using email and password")
+    public void ShouldBeAbleToLoginWithEmailAndPassword(){
+        LoginPage loginPage =new LoginPage(getDrive());
+        boolean iswelcomed =loginPage
+                .load()
+                .login(ConfigUtils.getInstance().getemail(), ConfigUtils.getInstance().getPassword())
+                .isdisplayed();
+        Assert.assertTrue(iswelcomed);
+
+
+    }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>selenium-to-do</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>17</maven.compiler.source>\r\n        <maven.compiler.target>17</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n    \r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/pom.xml	(date 1734039289454)
@@ -13,5 +13,69 @@
         <maven.compiler.target>17</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
-    
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>3.0.0-M7</version>
+                <configuration>
+                    <argLine>
+                        -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/1.9.19/aspectjweaver-1.9.19.jar"
+                    </argLine>
+                    <parallel>methods</parallel>
+                    <threadCount>3</threadCount>
+
+                </configuration>
+                <dependencies>
+                    <dependency>
+                        <groupId>org.aspectj</groupId>
+                        <artifactId>aspectjweaver</artifactId>
+                        <version>1.9.19</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+        </plugins>
+    </build>
+<dependencies>
+    <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
+    <dependency>
+        <groupId>org.seleniumhq.selenium</groupId>
+        <artifactId>selenium-java</artifactId>
+        <version>4.27.0</version>
+    </dependency>
+    <!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
+    <dependency>
+        <groupId>io.github.bonigarcia</groupId>
+        <artifactId>webdrivermanager</artifactId>
+        <version>5.9.2</version>
+    </dependency>
+    <!-- https://mvnrepository.com/artifact/org.testng/testng -->
+    <dependency>
+        <groupId>org.testng</groupId>
+        <artifactId>testng</artifactId>
+        <version>7.10.2</version>
+        <scope>test</scope>
+    </dependency>
+    <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
+    <dependency>
+        <groupId>io.rest-assured</groupId>
+        <artifactId>rest-assured</artifactId>
+        <version>5.5.0</version>
+        <scope>test</scope>
+    </dependency>
+    <!-- https://mvnrepository.com/artifact/com.github.javafaker/javafaker -->
+    <dependency>
+        <groupId>com.github.javafaker</groupId>
+        <artifactId>javafaker</artifactId>
+        <version>1.0.2</version>
+    </dependency>
+    <!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-testng -->
+    <dependency>
+        <groupId>io.qameta.allure</groupId>
+        <artifactId>allure-testng</artifactId>
+        <version>2.29.0</version>
+    </dependency>
+
+</dependencies>
 </project>
\ No newline at end of file
Index: src/test/java/com/qacart/todo/factory/DriverFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.factory;\r\n\r\npublic class DriverFactory {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/factory/DriverFactory.java b/src/test/java/com/qacart/todo/factory/DriverFactory.java
--- a/src/test/java/com/qacart/todo/factory/DriverFactory.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/factory/DriverFactory.java	(date 1733760819680)
@@ -1,4 +1,36 @@
 package com.qacart.todo.factory;
 
+import io.github.bonigarcia.wdm.WebDriverManager;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.edge.EdgeDriver;
+import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.safari.SafariDriver;
+
+import java.time.Duration;
+
+
 public class DriverFactory {
+
+
+    public WebDriver initializeDriver(){
+String browser = System.getProperty("browser" ,"CHROME");
+        WebDriver driver;
+        switch (browser){
+        case "CHROME":
+            driver =new ChromeDriver();
+            break;
+        case "FIREFOX":
+        driver =new FirefoxDriver();
+            break;
+        case "SAFARI":
+        driver =new SafariDriver();
+            break;
+        default:
+            throw new RuntimeException("the browser is not supported");
+    }
+    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
+    driver.manage().window().maximize();
+    return driver;
+}
 }
Index: src/test/java/com/qacart/todo/base/BaseTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.base;\r\n\r\npublic class BaseTest {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/base/BaseTest.java b/src/test/java/com/qacart/todo/base/BaseTest.java
--- a/src/test/java/com/qacart/todo/base/BaseTest.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/base/BaseTest.java	(date 1734104620693)
@@ -1,4 +1,65 @@
 package com.qacart.todo.base;
 
+import com.qacart.todo.factory.DriverFactory;
+import com.qacart.todo.utils.CookiesUtils;
+import io.qameta.allure.Allure;
+import io.qameta.allure.Step;
+import io.restassured.http.Cookie;
+import org.apache.commons.io.FileUtils;
+import org.openqa.selenium.OutputType;
+import org.openqa.selenium.TakesScreenshot;
+import org.openqa.selenium.WebDriver;
+import org.testng.ITestResult;
+import org.testng.annotations.AfterMethod;
+import org.testng.annotations.BeforeMethod;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+
+import static java.sql.DriverManager.getDriver;
+
+
 public class BaseTest {
+    protected ThreadLocal<WebDriver> driver=new ThreadLocal<>();
+public void setDriver(WebDriver driver){
+    this.driver.set(driver);
+}
+public WebDriver getDrive(){
+    return this.driver.get();
+}
+    @BeforeMethod
+    public void setup (){
+
+        WebDriver driver = new DriverFactory().initializeDriver();
+        setDriver(driver);
+    }
+    @AfterMethod
+    public void teardown(ITestResult result){
+    String testCaseName =result.getMethod().getMethodName();
+    File destFile =new File("target"+File.separator+"screenshoots"+File.separator+testCaseName+".png");
+    takeScreenShoot(destFile);
+
+        getDrive().quit();
+    }
+    @Step
+    public void injectCookiesToBrowser(List<Cookie> restAssuredCookies){
+        List<org.openqa.selenium.Cookie>seleniumCookies=CookiesUtils.convertRestAssuredCookiesToSeleniumCookies(restAssuredCookies);
+
+for(org.openqa.selenium.Cookie cookie :seleniumCookies){
+    getDrive().manage().addCookie(cookie);
+}
+    }
+    public void takeScreenShoot(File destfile){
+        File file =((TakesScreenshot) getDrive()).getScreenshotAs(OutputType.FILE);
+        try {
+            FileUtils.copyFile(file,destfile);
+            InputStream is=new FileInputStream(destfile);
+            Allure.addAttachment("screenshoot",is);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
Index: src/test/java/com/qacart/todo/pages/LoginPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.pages;\r\n\r\npublic class LoginPage {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/pages/LoginPage.java b/src/test/java/com/qacart/todo/pages/LoginPage.java
--- a/src/test/java/com/qacart/todo/pages/LoginPage.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/pages/LoginPage.java	(date 1734037299411)
@@ -1,4 +1,41 @@
 package com.qacart.todo.pages;
 
-public class LoginPage {
+import com.qacart.todo.base.BasePage;
+import com.qacart.todo.base.BaseTest;
+import com.qacart.todo.utils.ConfigUtils;
+import com.qacart.todo.utils.PropertiesUtils;
+import io.qameta.allure.Step;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import org.openqa.selenium.support.PageFactory;
+
+import java.util.Properties;
+
+public class LoginPage  extends BasePage {
+    public LoginPage(WebDriver driver) {
+        super(driver);
+    }
+
+    @FindBy(css = "[data-testid=\"email\"]")
+    private WebElement emailInput ;
+
+    @FindBy(css = "[data-testid=\"password\"]")
+    private WebElement passwordInput ;
+
+    @FindBy(css = "[data-testid=\"submit\"]")
+    private WebElement submit ;
+
+    @Step("Enter email and password to the login page")
+    public TodoPage login (String email ,String password){
+        emailInput.sendKeys(email);
+        passwordInput.sendKeys(password);
+        submit.click();
+        return new TodoPage(driver);
+    }
+    @Step("Load the login page")
+    public LoginPage load() {
+        driver.get(ConfigUtils.getInstance().getBaseUrl());
+        return this;
+    }
 }
Index: src/test/java/com/qacart/todo/config/EndPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.config;\r\n\r\npublic class EndPoint {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/config/EndPoint.java b/src/test/java/com/qacart/todo/config/EndPoint.java
--- a/src/test/java/com/qacart/todo/config/EndPoint.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/config/EndPoint.java	(date 1734027328020)
@@ -1,4 +1,8 @@
 package com.qacart.todo.config;
 
 public class EndPoint {
+    public final static String API_REGISTER_ENDPOINT ="/api/v1/users/register";
+    public final static String API_TASK_ENDPOINT ="/api/v1/tasks";
+    public final static String NEW_TODO_END_POINT ="/todo/new";
+
 }
Index: src/test/java/com/qacart/todo/base/BasePage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.base;\r\n\r\npublic class BasePage {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/base/BasePage.java b/src/test/java/com/qacart/todo/base/BasePage.java
--- a/src/test/java/com/qacart/todo/base/BasePage.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/base/BasePage.java	(date 1733664902965)
@@ -1,4 +1,13 @@
 package com.qacart.todo.base;
 
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.support.PageFactory;
+
 public class BasePage {
+
+    protected WebDriver driver ;
+    public BasePage (WebDriver driver){
+        this.driver =driver;
+        PageFactory.initElements(driver ,this);
+    }
 }
Index: src/test/java/com/qacart/todo/utils/UserUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.utils;\r\n\r\npublic class UserUtils {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/utils/UserUtils.java b/src/test/java/com/qacart/todo/utils/UserUtils.java
--- a/src/test/java/com/qacart/todo/utils/UserUtils.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/utils/UserUtils.java	(date 1733960325765)
@@ -1,4 +1,15 @@
 package com.qacart.todo.utils;
 
+import com.github.javafaker.Faker;
+import com.qacart.todo.object.User;
+
 public class UserUtils {
+    public static User generateRandomUser(){
+        String firstName =new Faker().name().firstName();
+        String lastName =new Faker().name().firstName();
+        String email =new Faker().internet().emailAddress();
+
+        User user =new User(firstName,lastName,email,"password");
+        return user;
+    }
 }
Index: src/test/java/com/qacart/todo/utils/CookiesUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.utils;\r\n\r\npublic class CookiesUtils {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/utils/CookiesUtils.java b/src/test/java/com/qacart/todo/utils/CookiesUtils.java
--- a/src/test/java/com/qacart/todo/utils/CookiesUtils.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/utils/CookiesUtils.java	(date 1733966682699)
@@ -1,4 +1,18 @@
 package com.qacart.todo.utils;
 
+import io.restassured.http.Cookie;
+
+import java.util.ArrayList;
+import java.util.List;
+
 public class CookiesUtils {
+    public static List<org.openqa.selenium.Cookie> convertRestAssuredCookiesToSeleniumCookies(List<Cookie> restAssuredCookies){
+        List<org.openqa.selenium.Cookie>seleniumCookies =new ArrayList<>();
+        for(Cookie cookie: restAssuredCookies){
+            org.openqa.selenium.Cookie seleniumCookie =new org.openqa.selenium.Cookie(cookie.getName(),cookie.getValue());
+            seleniumCookies.add(seleniumCookie);
+        }
+        return seleniumCookies;
+
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ecf7023b-453b-46c1-9ce6-ca42435edaa0\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 4\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2ptj2CgQ2itsfBMDy3jw21cunlp\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"dart.analysis.tool.window.visible\": \"false\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"kotlin-language-version-configured\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ecf7023b-453b-46c1-9ce6-ca42435edaa0\" name=\"Changes\" comment=\"\" />\r\n      <created>1733592058706</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1733592058706</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/.idea/workspace.xml	(date 1734108594104)
@@ -4,18 +4,59 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ecf7023b-453b-46c1-9ce6-ca42435edaa0" name="Changes" comment="" />
+    <list default="true" id="ecf7023b-453b-46c1-9ce6-ca42435edaa0" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.gethub/workflows/main.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/apis/RegisterApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/apis/RegisterApi.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/apis/TaskApi.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/apis/TaskApi.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/base/BasePage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/base/BasePage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/base/BaseTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/base/BaseTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/config/EndPoint.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/config/EndPoint.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/config/production.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/config/production.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/factory/DriverFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/factory/DriverFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/object/Task.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/object/Task.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/object/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/object/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/LoginPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/LoginPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/NewTodoPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/NewTodoPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/TodoPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/pages/TodoPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/testcases/TodoTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/testcases/TodoTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/testcases/loginTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/testcases/loginTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/ConfigUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/ConfigUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/CookiesUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/CookiesUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/PropertiesUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/PropertiesUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/UserUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/qacart/todo/utils/UserUtils.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 4
-}]]></component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;metolly&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/metolly/TodoApplicationSeleniumProject.git&quot;,
+    &quot;accountId&quot;: &quot;4f4b6067-26e9-4045-af07-1e777c75acd9&quot;
+  }
+}</component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 4
+}</component>
   <component name="ProjectId" id="2ptj2CgQ2itsfBMDy3jw21cunlp" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -24,11 +65,85 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "TestNG.TodoTest.shouldBeAbleToAddNewToDo.executor": "Run",
+    "TestNG.TodoTest.shouldBeAbleToDeleteToDo.executor": "Run",
+    "TestNG.loginTest.ShouldBeAbleToLoginWithEmailAndPassword.executor": "Run",
+    "TestNG.loginTest.executor": "Run",
     "dart.analysis.tool.window.visible": "false",
     "git-widget-placeholder": "master",
-    "kotlin-language-version-configured": "true"
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "E:/selenium-to-do"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="E:\selenium-to-do" />
+    </key>
+  </component>
+  <component name="RunManager" selected="TestNG.loginTest.ShouldBeAbleToLoginWithEmailAndPassword">
+    <configuration name="TodoTest.shouldBeAbleToAddNewToDo" type="TestNG" temporary="true" nameIsGenerated="true">
+      <module name="selenium-to-do" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.qacart.todo.testcases.loginTest" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <option name="PACKAGE_NAME" value="com.qacart.todo.testcases" />
+      <option name="MAIN_CLASS_NAME" value="com.qacart.todo.testcases.TodoTest" />
+      <option name="METHOD_NAME" value="shouldBeAbleToAddNewToDo" />
+      <option name="TEST_OBJECT" value="METHOD" />
+      <properties />
+      <listeners />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="TodoTest.shouldBeAbleToDeleteToDo" type="TestNG" temporary="true" nameIsGenerated="true">
+      <module name="selenium-to-do" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.qacart.todo.testcases.loginTest" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <option name="PACKAGE_NAME" value="com.qacart.todo.testcases" />
+      <option name="MAIN_CLASS_NAME" value="com.qacart.todo.testcases.TodoTest" />
+      <option name="METHOD_NAME" value="shouldBeAbleToDeleteToDo" />
+      <option name="TEST_OBJECT" value="METHOD" />
+      <properties />
+      <listeners />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="loginTest.ShouldBeAbleToLoginWithEmailAndPassword" type="TestNG" temporary="true" nameIsGenerated="true">
+      <module name="selenium-to-do" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.qacart.todo.testcases.loginTest" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <option name="PACKAGE_NAME" value="com.qacart.todo.testcases" />
+      <option name="MAIN_CLASS_NAME" value="com.qacart.todo.testcases.loginTest" />
+      <option name="METHOD_NAME" value="ShouldBeAbleToLoginWithEmailAndPassword" />
+      <option name="TEST_OBJECT" value="METHOD" />
+      <properties />
+      <listeners />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="TestNG.loginTest.ShouldBeAbleToLoginWithEmailAndPassword" />
+        <item itemvalue="TestNG.TodoTest.shouldBeAbleToDeleteToDo" />
+        <item itemvalue="TestNG.TodoTest.shouldBeAbleToAddNewToDo" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -40,4 +155,19 @@
     </task>
     <servers />
   </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-method">
+          <url>file://$PROJECT_DIR$/src/test/java/com/qacart/todo/testcases/TodoTest.java</url>
+          <line>23</line>
+          <properties class="com.qacart.todo.testcases.TodoTest" method="shouldBeAbleToAddNewToDo">
+            <option name="EMULATED" value="true" />
+            <option name="WATCH_EXIT" value="false" />
+          </properties>
+          <option name="timeStamp" value="2" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
 </project>
\ No newline at end of file
Index: .gethub/workflows/main.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gethub/workflows/main.yml b/.gethub/workflows/main.yml
new file mode 100644
--- /dev/null	(date 1734106106375)
+++ b/.gethub/workflows/main.yml	(date 1734106106375)
@@ -0,0 +1,19 @@
+
+
+name: Run Selenium Test
+
+on:
+  push:
+    branches: ["master"]
+
+jobs:
+  test:
+    runs-on: windows-latest
+    steps:
+      - uses: actions/checkout@v3
+      - uses: actions/setup-java@v3
+        with:
+          java-version: "17"
+          cache: maven
+      - uses: browser-actions/setup-chrome@latest
+      - run: mvn clean test
\ No newline at end of file
Index: src/test/java/com/qacart/todo/object/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.object;\r\n\r\npublic class User {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/object/User.java b/src/test/java/com/qacart/todo/object/User.java
--- a/src/test/java/com/qacart/todo/object/User.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/object/User.java	(date 1733933517516)
@@ -1,4 +1,47 @@
 package com.qacart.todo.object;
 
 public class User {
+    private String email;
+    private String password;
+    private String firstName;
+    private String lastName;
+    public User(String firstName,String lastName ,String email ,String password){
+this.firstName =firstName ;
+this.lastName =lastName;
+this.email=email;
+this.password =password;
+    }
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+
 }
Index: src/test/java/com/qacart/todo/testcases/TodoTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.testcases;\r\n\r\npublic class TodoTest {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/testcases/TodoTest.java b/src/test/java/com/qacart/todo/testcases/TodoTest.java
--- a/src/test/java/com/qacart/todo/testcases/TodoTest.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/testcases/TodoTest.java	(date 1734036890533)
@@ -1,4 +1,50 @@
 package com.qacart.todo.testcases;
 
-public class TodoTest {
+import com.qacart.todo.apis.RegisterApi;
+import com.qacart.todo.apis.TaskApi;
+import com.qacart.todo.base.BaseTest;
+import com.qacart.todo.factory.DriverFactory;
+import com.qacart.todo.pages.LoginPage;
+import com.qacart.todo.pages.NewTodoPage;
+import com.qacart.todo.pages.TodoPage;
+import com.qacart.todo.utils.ConfigUtils;
+import io.qameta.allure.Feature;
+import io.qameta.allure.Story;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.edge.EdgeDriver;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+import java.time.Duration;
+@Feature("Todo Feature")
+public class TodoTest extends BaseTest {
+@Story("Add Todo")
+    @Test(description = "Should be able to add new todo correctly ")
+    public void shouldBeAbleToAddNewToDo(){
+        RegisterApi registerApi =new RegisterApi();
+        registerApi.register();
+        TodoPage todoPage =new TodoPage(getDrive());
+        todoPage.load();
+        injectCookiesToBrowser(registerApi.getRestAssuredCookies());
+        String actualResult=todoPage.load().clickOnPlusButton().submit_newtask("mostafa").getTodo_ItemText();
+
+        Assert.assertEquals(actualResult ,"mostafa");
+
+    }
+    @Story("delete Todo")
+
+    @Test(description = "Should be able to add delete todo correctly ")
+    public void shouldBeAbleToDeleteToDo(){
+RegisterApi registerApi =new RegisterApi();
+registerApi.register();
+        TaskApi taskApi =new TaskApi();
+        taskApi.addTask(registerApi.getAccessToken());
+TodoPage todoPage =new TodoPage(getDrive());
+todoPage.load();
+injectCookiesToBrowser(registerApi.getRestAssuredCookies());
+        boolean isNoTodoMessageDisplayed =todoPage.load().deleteButton().noTodos();
+        Assert.assertTrue(isNoTodoMessageDisplayed);
+
+    }
 }
Index: src/test/java/com/qacart/todo/apis/RegisterApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.apis;\r\n\r\npublic class RegisterApi {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/apis/RegisterApi.java b/src/test/java/com/qacart/todo/apis/RegisterApi.java
--- a/src/test/java/com/qacart/todo/apis/RegisterApi.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/apis/RegisterApi.java	(date 1734019888744)
@@ -1,4 +1,52 @@
 package com.qacart.todo.apis;
 
+import com.qacart.todo.config.EndPoint;
+import com.qacart.todo.object.User;
+import com.qacart.todo.utils.UserUtils;
+import io.restassured.http.Cookie;
+import io.restassured.http.Cookies;
+import io.restassured.response.Response;
+
+import java.util.List;
+
+import static io.restassured.RestAssured.given;
+
 public class RegisterApi {
+    private List<Cookie> restAssuredCookies;
+
+    public String getUserId() {
+        return userId;
+    }
+
+    private String userId ;
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    private String  firstName ;
+    public String getAccessToken() {
+        return accessToken;
+    }
+
+    public List<Cookie> getRestAssuredCookies() {
+        return restAssuredCookies;
+    }
+
+    private String accessToken ;
+    public void register(){
+        User user =UserUtils.generateRandomUser();
+        Response response =given().baseUri("https://todo.qacart.com")
+                .header("Content-Type","application/json")
+                .body(user)
+                .when()
+                .post(EndPoint.API_REGISTER_ENDPOINT)
+                .then()
+                .extract().response();
+        restAssuredCookies = response.detailedCookies().asList();
+        accessToken =response.path("access_token");
+        firstName =response.path("firstName");
+        userId =response.path("userId");
+
+    }
 }
Index: src/test/java/com/qacart/todo/object/Task.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.object;\r\n\r\npublic class Task {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/object/Task.java b/src/test/java/com/qacart/todo/object/Task.java
--- a/src/test/java/com/qacart/todo/object/Task.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/object/Task.java	(date 1734019104786)
@@ -1,4 +1,29 @@
 package com.qacart.todo.object;
 
 public class Task {
+
+    private boolean isCompleted;
+    private String item ;
+
+    public Task(String item,boolean isCompleted){
+        this.item=item;
+        this.isCompleted=isCompleted;
+    }
+    public boolean getIsCompleted() {
+        return isCompleted;
+    }
+
+    public void setIsCompleted(boolean completed) {
+        isCompleted = completed;
+    }
+
+    public String getItem() {
+        return item;
+    }
+
+    public void setItem(String item) {
+        this.item = item;
+    }
+
+
 }
Index: src/test/java/com/qacart/todo/config/production.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/test/java/com/qacart/todo/config/production.properties b/src/test/java/com/qacart/todo/config/production.properties
--- a/src/test/java/com/qacart/todo/config/production.properties	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/config/production.properties	(date 1733761585251)
@@ -1,0 +1,3 @@
+baseUrl=https://todo.qacart.com/login
+email=mostafametwally084@gmail.com
+password=Mostafa1234!
\ No newline at end of file
Index: src/test/java/com/qacart/todo/apis/TaskApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.qacart.todo.apis;\r\n\r\npublic class TaskApi {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/qacart/todo/apis/TaskApi.java b/src/test/java/com/qacart/todo/apis/TaskApi.java
--- a/src/test/java/com/qacart/todo/apis/TaskApi.java	(revision 0af3a136713daa74961934267bc354cd10eacc6d)
+++ b/src/test/java/com/qacart/todo/apis/TaskApi.java	(date 1734019995724)
@@ -1,4 +1,23 @@
 package com.qacart.todo.apis;
 
+import com.qacart.todo.config.EndPoint;
+import com.qacart.todo.object.Task;
+import com.qacart.todo.utils.ConfigUtils;
+import io.restassured.response.Response;
+
+import static io.restassured.RestAssured.given;
+
 public class TaskApi {
+
+    public void addTask(String token){
+        Task task =new Task("mostafa",false);
+        Response response = given().baseUri("https://todo.qacart.com")
+                .header("Content-Type","application/json")
+                .body(task)
+                .auth().oauth2(token)
+                .when().post(EndPoint.API_TASK_ENDPOINT)
+                .then().log().all().extract().response();
+    if(response.statusCode()!=201){throw new RuntimeException("some thing went wrong ");
+    }
+    }
 }
